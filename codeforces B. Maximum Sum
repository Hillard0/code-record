/*
first ,I will show this tile:

You are given an array a1,a2,…,an
, where all elements are different.

You have to perform exactly k
 operations with it. During each operation, you do exactly one of the following two actions (you choose which to do yourself):

find two minimum elements in the array, and delete them;
find the maximum element in the array, and delete it.
You have to calculate the maximum possible sum of elements in the resulting array.

Input
The first line contains one integer t
 (1≤t≤104
) — the number of test cases.

Each test case consists of two lines:

the first line contains two integers n
 and k
 (3≤n≤2⋅105
; 1≤k≤99999
; 2k<n
) — the number of elements and operations, respectively.
the second line contains n
 integers a1,a2,…,an
 (1≤ai≤109
; all ai
 are different) — the elements of the array.
Additional constraint on the input: the sum of n
 does not exceed 2⋅105
.

Output
For each test case, print one integer — the maximum possible sum of elements in the resulting array.
*/

// This is the solvetion :

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;


int n, k;

int main() {
    int T;
    cin >> T;
    while (T--) {
        cin >> n >> k;   
        int a[n+1];
        ll s[n+1] ;
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
        }
        sort(a + 1, a + n + 1);
        for (int i = 1; i <= n; i++) {
            s[i] = s[i - 1] + a[i];
        }
        ll res = 0;
        for (int i = 0; i <= k; i++) {
            res = max(res, s[n - i] - s[2 * (k - i)]);
        }
        cout << res << '\n';
    }
    return 0;
}

